@model List<SitioSubicIMS.Web.Models.ViewModels.PaymentViewModel>

@{
    ViewData["Title"] = "Payment Records";
}

<h4>Payment Records</h4>

<div class="d-flex justify-content-between align-items-center mb-3">
    <a href="@Url.Action("PaymentForm", "Payments")" class="btn btn-success" title="Add Payment">
        <i class="bi bi-plus-lg"></i>
    </a>

    <div class="input-group" style="width: 300px;">
        <input id="searchBox" type="text" class="form-control form-control-sm" placeholder="Search readings..." />
        <span class="input-group-text"><i class="bi bi-search"></i></span>
    </div>
</div>

<div class="table-responsive">
    <table id="paymentTable" class="table table-bordered table-hover align-middle table-sm custom-user-table">
        <thead class="table-dark">
            <tr>
                @* <th>Payment #</th>
                <th>Billing #</th> *@
                <th>Account</th>
                <th>Amount Paid</th>
                <th>Payment Date</th>
                <th>Payment Method</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                var payment = item.Payment;
                var billing = item.Billing;
                var account = item.Account;

                <tr>
                    @* <td>@payment.PaymentNumber</td>
                    <td>@payment.Billing.BillingNumber</td> *@
                    <td>@account?.AccountName</td>
                    <td>@payment.AmountPaid.ToString("N2")</td>
                    <td>@payment.PaymentDate.ToString("yyyy-MM-dd")</td>
                    <td>@payment.PaymentMethod</td>
                    <td>
                        @if (payment.PaymentStatus == PaymentStatus.Posted)
                        {
                            <span class="badge bg-success">Posted</span>
                        }
                        else if (payment.PaymentStatus == PaymentStatus.Unposted)
                        {
                            <span class="badge bg-warning text-dark">Unposted</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">@payment.PaymentStatus.ToString()</span>
                        }
                    </td>
                    <td>
                        @if (payment.PaymentStatus != PaymentStatus.Posted)
                        {
                            <button type="button"
                                    class="btn btn-sm btn-success me-1"
                                    title="Confirm Payment"
                                    data-bs-toggle="modal"
                                    data-bs-target="#confirmModal"
                                    data-payment-id="@payment.PaymentID">
                                <i class="bi bi-check-circle"></i>
                            </button>
                        }
                        @* <a asp-action="Details"
                           asp-route-id="@payment.PaymentID"
                           class="btn btn-sm btn-primary"
                           title="View Payment Details">
                            <i class="bi bi-eye"></i>
                        </a> *@
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div id="paginationWrapper" class="d-flex justify-content-between align-items-center mt-3 flex-wrap">
    <small id="paginationInfo" class="text-muted mb-2"></small>
    <nav>
        <ul id="pagination" class="pagination pagination-sm mb-0"></ul>
    </nav>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-warning">
                <h5 class="modal-title" id="confirmModalLabel">Confirm Payment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Are you sure you want to confirm this payment?
            </div>
            <div class="modal-footer">
                <form id="confirmForm" method="post" asp-action="Confirm">
                    <input type="hidden" id="paymentIdInput" name="id" />
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">Yes, Confirm</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var confirmModal = document.getElementById('confirmModal');
        confirmModal.addEventListener('show.bs.modal', function (event) {
            var button = event.relatedTarget;
            var paymentId = button.getAttribute('data-payment-id');

            var paymentIdInput = confirmModal.querySelector('#paymentIdInput');
            paymentIdInput.value = paymentId;

            var form = confirmModal.querySelector('#confirmForm');
            form.action = `/Payments/Confirm/${paymentId}`;
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const searchBox = document.getElementById('searchBox');
            const table = document.getElementById('paymentTable');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            const pageSize = 10;
            let currentPage = 1;
            let filteredRows = rows;

            const recordCount = document.getElementById('paginationInfo');
            const paginationList = document.getElementById('pagination');

            function renderPagination() {
                const totalPages = Math.ceil(filteredRows.length / pageSize);
                if (currentPage > totalPages) currentPage = totalPages || 1;

                rows.forEach(row => row.style.display = 'none');
                filteredRows.slice((currentPage - 1) * pageSize, currentPage * pageSize)
                            .forEach(row => row.style.display = '');

                paginationList.innerHTML = '';

                if (totalPages === 0) {
                    recordCount.textContent = 'No payment records found.';
                    return;
                }

                const startItem = (currentPage - 1) * pageSize + 1;
                const endItem = Math.min(currentPage * pageSize, filteredRows.length);
                recordCount.textContent = `Showing ${startItem} to ${endItem} of ${filteredRows.length} records`;

                function addPageItem(page, text = null, isActive = false, isDisabled = false) {
                    const li = document.createElement('li');
                    li.className = 'page-item' + (isActive ? ' active' : '') + (isDisabled ? ' disabled' : '');
                    li.innerHTML = `<a class="page-link" href="#">${text || page}</a>`;
                    if (!isDisabled) {
                        li.addEventListener('click', (e) => {
                            e.preventDefault();
                            currentPage = page;
                            renderPagination();
                        });
                    }
                    paginationList.appendChild(li);
                }

                addPageItem(currentPage - 1, 'Previous', false, currentPage === 1);

                const maxPagesToShow = 5;
                if (totalPages <= maxPagesToShow + 2) {
                    for (let i = 1; i <= totalPages; i++) {
                        addPageItem(i, null, i === currentPage);
                    }
                } else {
                    addPageItem(1, '1', currentPage === 1);

                    if (currentPage > 3) {
                        const ellipsis = document.createElement('li');
                        ellipsis.className = 'page-item disabled';
                        ellipsis.innerHTML = '<span class="page-link">...</span>';
                        paginationList.appendChild(ellipsis);
                    }

                    const start = Math.max(2, currentPage - 1);
                    const end = Math.min(totalPages - 1, currentPage + 1);

                    for (let i = start; i <= end; i++) {
                        addPageItem(i, null, i === currentPage);
                    }

                    if (currentPage < totalPages - 2) {
                        const ellipsis = document.createElement('li');
                        ellipsis.className = 'page-item disabled';
                        ellipsis.innerHTML = '<span class="page-link">...</span>';
                        paginationList.appendChild(ellipsis);
                    }

                    addPageItem(totalPages, totalPages.toString(), currentPage === totalPages);
                }

                addPageItem(currentPage + 1, 'Next', false, currentPage === totalPages);
            }

            function filterRows() {
                const term = searchBox.value.trim().toLowerCase();
                filteredRows = rows.filter(r => r.textContent.toLowerCase().includes(term));
                currentPage = 1;
                renderPagination();
            }

            searchBox.addEventListener('input', filterRows);
            filterRows();
        });
    </script>
}
